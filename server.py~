import tornado.web
import tornado.websocket
import tornado.ioloop
import tornado.httpserver
import json
import pymongo
import os


class BaseHandler(tornado.web.RequestHandler):
    def get_current_user(self):
        return self.get_cookie("login")


class MainHandler(BaseHandler):
    def get(self):
        #if not self.current_user:
        #   self.redirect("/login/")
        #   return
        self.render("main.html")


#class LoginHandler(BaseHandler):
#    def get(self):
#        self.render("login.html")
#    def post(self):
#        self.set_cookie("login", self.get_argument("login"))
#        self.redirect("/")


class Application(tornado.web.Application):
    def __init__(self):
        handlers = [(r'/', MainHandler),
                    #(r'/login/', LoginHandler),
                    (r'/main/', WSMainHandler)
                   ]
        settings = dict(
        template_path = "/home/jack/chat/template",
        static_path = "/home/jack/chat/static"
        )
        tornado.web.Application.__init__(self, handlers, **settings)


class WSMainHandler(tornado.websocket.WebSocketHandler):
    def open(self):
       cookie = self.get_cookie("login")
       if not cookie:
          self.write_message("<form action='/main/' method='post'><p>login<input   type='text'    name='login'></p><p><input   type='submit'  value='send'></p></form>")
          print ("Not cookie")
       else:
          print("connect on main page")

    def on_message(self, message):
       print (message)

    def on_close(self):
       print ("Close main page")


if __name__ == "__main__":
   try:
      server = tornado.httpserver.HTTPServer(Application())
      server.listen(8888)
      tornado.ioloop.IOLoop.instance().start()
   except KeyboardInterrupt: print("\n")
